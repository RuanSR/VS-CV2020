// <auto-generated />
using System;
using DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(CVContext))]
    partial class CVContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("Model.Classes.Atendente", b =>
                {
                    b.Property<int>("AtendenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NivelAcesso")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Usuario")
                        .HasColumnType("TEXT");

                    b.HasKey("AtendenteId");

                    b.ToTable("Atendentes");
                });

            modelBuilder.Entity("Model.Classes.ClienteModel.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apelido")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpf")
                        .HasColumnType("TEXT");

                    b.Property<string>("Endereco")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telefone")
                        .HasColumnType("TEXT");

                    b.HasKey("ClienteId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Model.Classes.ClienteModel.NotaConta", b =>
                {
                    b.Property<int>("NotaContaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataConta")
                        .HasColumnType("TEXT");

                    b.Property<double>("LimiteConta")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalConta")
                        .HasColumnType("REAL");

                    b.HasKey("NotaContaId");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("NotaContas");
                });

            modelBuilder.Entity("Model.Classes.ClienteModel.RegistroNota", b =>
                {
                    b.Property<int>("RegistroNotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeAtendente")
                        .HasColumnType("TEXT");

                    b.Property<int>("NotaContaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextoDescricao")
                        .HasColumnType("TEXT");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("RegistroNotaId");

                    b.HasIndex("NotaContaId");

                    b.ToTable("RegistroNotas");
                });

            modelBuilder.Entity("Model.Classes.ClienteModel.NotaConta", b =>
                {
                    b.HasOne("Model.Classes.ClienteModel.Cliente", null)
                        .WithOne("NotaConta")
                        .HasForeignKey("Model.Classes.ClienteModel.NotaConta", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Classes.ClienteModel.RegistroNota", b =>
                {
                    b.HasOne("Model.Classes.ClienteModel.NotaConta", null)
                        .WithMany("RegistroNotas")
                        .HasForeignKey("NotaContaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
